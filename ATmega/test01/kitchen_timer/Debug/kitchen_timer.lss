
kitchen_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000006f6  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800118  00800118  000007a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000edc  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af6  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078b  00000000  00000000  0000228a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bb  00000000  00000000  00003091  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	d6 c0       	rjmp	.+428    	; 0x1c2 <__vector_5>
  16:	00 00       	nop
  18:	f5 c0       	rjmp	.+490    	; 0x204 <__vector_6>
  1a:	00 00       	nop
  1c:	37 c1       	rjmp	.+622    	; 0x28c <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	52 c1       	rjmp	.+676    	; 0x2de <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	16 c3       	rjmp	.+1580   	; 0x6f2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
	// 7-Segment 사용 : 4 Module = C type
	//   pin assign : PAx = Segment img, PBx = module sel
	// interrupt 사용 : INT4 ~ INT6 (Ext Int)
	//   pin assign : PE4 ~ PE6
    
	DDRA |= 0x07;
  c8:	8a b3       	in	r24, 0x1a	; 26
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF; // 세그먼트
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	81 bb       	out	0x11, r24	; 17
	DDRF = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	SegPort(&PORTD, &PORTF);
  d8:	62 e6       	ldi	r22, 0x62	; 98
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	4c d1       	rcall	.+664    	; 0x37a <SegPort>
	
	TIMSK |= 0x04; // 0000 0100b - Timer 1 TCNT overflow interrupt (16bit)
  e2:	87 b7       	in	r24, 0x37	; 55
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0x04;  // 분주비 (Pre-Scaler) 64
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	8e bd       	out	0x2e, r24	; 46
	// 인터럽트 설정
	EIMSK = 0x70; // 0111 0000b
  ec:	80 e7       	ldi	r24, 0x70	; 112
  ee:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x2A; // 0010 1010b
  f0:	8a e2       	ldi	r24, 0x2A	; 42
  f2:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80; // status Register - 인터럽트 허용
  f4:	8f b7       	in	r24, 0x3f	; 63
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	8f bf       	out	0x3f, r24	; 63
	sei();        // set interrupt - 인터럽트 시작
  fa:	78 94       	sei
	
	int t = 0;
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0

	while (1) 
    {
		switch(opmode)
 100:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opmode>
 104:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opmode+0x1>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	91 05       	cpc	r25, r1
 10c:	39 f0       	breq	.+14     	; 0x11c <main+0x54>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	91 05       	cpc	r25, r1
 112:	c1 f1       	breq	.+112    	; 0x184 <main+0xbc>
 114:	89 2b       	or	r24, r25
 116:	09 f0       	breq	.+2      	; 0x11a <main+0x52>
 118:	47 c0       	rjmp	.+142    	; 0x1a8 <main+0xe0>
 11a:	44 c0       	rjmp	.+136    	; 0x1a4 <main+0xdc>
		{
			case 0: // reset & wait
				t = 0; break;
			case 1: // counter start
				if(mode == 2)
 11c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 120:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 124:	02 97       	sbiw	r24, 0x02	; 2
 126:	e9 f4       	brne	.+58     	; 0x162 <main+0x9a>
				{
					cnt+=30;
 128:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cnt>
 12c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cnt+0x1>
 130:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <cnt+0x2>
 134:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <cnt+0x3>
 138:	4e 96       	adiw	r24, 0x1e	; 30
 13a:	a1 1d       	adc	r26, r1
 13c:	b1 1d       	adc	r27, r1
 13e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <cnt>
 142:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <cnt+0x1>
 146:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <cnt+0x2>
 14a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <cnt+0x3>
					opmode -=1;
 14e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opmode>
 152:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opmode+0x1>
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <opmode+0x1>
 15c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <opmode>
 160:	04 c0       	rjmp	.+8      	; 0x16a <main+0xa2>
				}
				else
				{
					t = cnt;
 162:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <cnt>
 166:	d0 91 1f 01 	lds	r29, 0x011F	; 0x80011f <cnt+0x1>
				}
				if(t == 90)
 16a:	ca 35       	cpi	r28, 0x5A	; 90
 16c:	d1 05       	cpc	r29, r1
 16e:	e1 f4       	brne	.+56     	; 0x1a8 <main+0xe0>
				{
					opmode+=2;
 170:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opmode>
 174:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opmode+0x1>
 178:	02 96       	adiw	r24, 0x02	; 2
 17a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <opmode+0x1>
 17e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <opmode>
 182:	12 c0       	rjmp	.+36     	; 0x1a8 <main+0xe0>
				}
				break;
			case 2: // count stop
				break;
			case 3:
				TogglePinA(2,__delay_t);
 184:	64 ef       	ldi	r22, 0xF4	; 244
 186:	71 e0       	ldi	r23, 0x01	; 1
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	dc d1       	rcall	.+952    	; 0x546 <TogglePinA>
				t++;
 18e:	21 96       	adiw	r28, 0x01	; 1
				opmode -= 2;
 190:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opmode>
 194:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opmode+0x1>
 198:	02 97       	sbiw	r24, 0x02	; 2
 19a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <opmode+0x1>
 19e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <opmode>
				break;
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0xe0>
	while (1) 
    {
		switch(opmode)
		{
			case 0: // reset & wait
				t = 0; break;
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
				t++;
				opmode -= 2;
				break;
			default: break;
		}
		mode_type();
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
		kitchen_timer(t);
 1a8:	f1 d1       	rcall	.+994    	; 0x58c <mode_type>
 1aa:	ce 01       	movw	r24, r28
 1ac:	1e d2       	rcall	.+1084   	; 0x5ea <kitchen_timer>
		SegDisp(cnt);
 1ae:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cnt>
 1b2:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cnt+0x1>
 1b6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cnt+0x2>
 1ba:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cnt+0x3>
 1be:	2d d1       	rcall	.+602    	; 0x41a <SegDisp>
		
    }
 1c0:	9f cf       	rjmp	.-194    	; 0x100 <main+0x38>

000001c2 <__vector_5>:
}
ISR(INT4_vect) //INT4 인터럽트 처리 루틴 : sw1
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
	opmode++;
 1d0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opmode>
 1d4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opmode+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <opmode+0x1>
 1de:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <opmode>
	if(opmode >= OPMODEMAX) opmode = 0;
 1e2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opmode>
 1e6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opmode+0x1>
 1ea:	03 97       	sbiw	r24, 0x03	; 3
 1ec:	24 f0       	brlt	.+8      	; 0x1f6 <__vector_5+0x34>
 1ee:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <opmode+0x1>
 1f2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <opmode>
}
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_6>:
ISR(INT5_vect) //INT5 인터럽트 처리 루틴 : sw2
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
	if(mode == 2)
 212:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 216:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 21a:	02 97       	sbiw	r24, 0x02	; 2
 21c:	a9 f4       	brne	.+42     	; 0x248 <__vector_6+0x44>
	{
		state++;
 21e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 222:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <state+0x1>
 22c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
		if(state > STATE_MAX1) state = 1;
 230:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 234:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 238:	03 97       	sbiw	r24, 0x03	; 3
 23a:	34 f0       	brlt	.+12     	; 0x248 <__vector_6+0x44>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <state+0x1>
 244:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
	}
	if(mode == 4)
 248:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 24c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 250:	04 97       	sbiw	r24, 0x04	; 4
 252:	a9 f4       	brne	.+42     	; 0x27e <__vector_6+0x7a>
	{
		state++;
 254:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 258:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <state+0x1>
 262:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
		if(state > STATE_MAX2) state = 3;
 266:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 26a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 26e:	05 97       	sbiw	r24, 0x05	; 5
 270:	34 f0       	brlt	.+12     	; 0x27e <__vector_6+0x7a>
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <state+0x1>
 27a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
	}
}
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_7>:
ISR(INT6_vect) //INT6 인터럽트 처리 루틴 : sw3
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
	mode++;
 29a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 29e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 2a8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	if(mode > mode_MAX) 
 2ac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2b0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 2b4:	05 97       	sbiw	r24, 0x05	; 5
 2b6:	64 f0       	brlt	.+24     	; 0x2d0 <__vector_7+0x44>
	{
		opmode = 0; state = 0;
 2b8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <opmode+0x1>
 2bc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <opmode>
 2c0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <state+0x1>
 2c4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <state>
		mode = 0;
 2c8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 2cc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
	}
}
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
	if(state == 0 && opmode == 1) cnt++;
 2f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 2f4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 2f8:	89 2b       	or	r24, r25
 2fa:	c9 f4       	brne	.+50     	; 0x32e <__vector_14+0x50>
 2fc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opmode>
 300:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opmode+0x1>
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	99 f4       	brne	.+38     	; 0x32e <__vector_14+0x50>
 308:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cnt>
 30c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cnt+0x1>
 310:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <cnt+0x2>
 314:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <cnt+0x3>
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	a1 1d       	adc	r26, r1
 31c:	b1 1d       	adc	r27, r1
 31e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <cnt>
 322:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <cnt+0x1>
 326:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <cnt+0x2>
 32a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <cnt+0x3>
	if(state == 3 && cnt > 0) cnt--;
 32e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 332:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 336:	03 97       	sbiw	r24, 0x03	; 3
 338:	b9 f4       	brne	.+46     	; 0x368 <__vector_14+0x8a>
 33a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cnt>
 33e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cnt+0x1>
 342:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <cnt+0x2>
 346:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <cnt+0x3>
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	a1 05       	cpc	r26, r1
 34e:	b1 05       	cpc	r27, r1
 350:	59 f0       	breq	.+22     	; 0x368 <__vector_14+0x8a>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	a1 09       	sbc	r26, r1
 356:	b1 09       	sbc	r27, r1
 358:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <cnt>
 35c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <cnt+0x1>
 360:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <cnt+0x2>
 364:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <cnt+0x3>
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <SegPort>:
uint8_t digit[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7C, 0x58, 0x5E, 0x79,0x71,0x00};
char arr[5]; // 세그먼트 이미지 정보를 담은 안전 영역
char *PA = &PORTD, *PB= &PORTF;
void SegPort(char *p1, char *p2)
{
	PA = p1; PB = p2;
 37a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PA+0x1>
 37e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PA>
 382:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <PB+0x1>
 386:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <PB>
 38a:	08 95       	ret

0000038c <seg>:
}
void seg(int sel, uint8_t c)
{
	*PB |= 0x0F;
 38c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 390:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 394:	20 81       	ld	r18, Z
 396:	2f 60       	ori	r18, 0x0F	; 15
 398:	20 83       	st	Z, r18
	*PB &= ~(1 <<(3-sel));
 39a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 39e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 3a2:	23 e0       	ldi	r18, 0x03	; 3
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	28 1b       	sub	r18, r24
 3a8:	39 0b       	sbc	r19, r25
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <seg+0x28>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	2a 95       	dec	r18
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <seg+0x24>
 3b8:	80 95       	com	r24
 3ba:	90 81       	ld	r25, Z
 3bc:	89 23       	and	r24, r25
 3be:	80 83       	st	Z, r24
	*PA = c; // 숫자 데이터 출력
 3c0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PA>
 3c4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PA+0x1>
 3c8:	60 83       	st	Z, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ca:	8f e9       	ldi	r24, 0x9F	; 159
 3cc:	9f e0       	ldi	r25, 0x0F	; 15
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <seg+0x42>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <seg+0x48>
 3d4:	00 00       	nop
 3d6:	08 95       	ret

000003d8 <FND_4>:
	_delay_ms(1); // 0.01초 간격으로 전환
}

int sm = 4;
void FND_4(char *inf) // segment Image 배열
{
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	8c 01       	movw	r16, r24
	for(int i = 0; i < sm; i++)
 3e2:	c0 e0       	ldi	r28, 0x00	; 0
 3e4:	d0 e0       	ldi	r29, 0x00	; 0
 3e6:	0d c0       	rjmp	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		seg(i, *(inf+i));
 3e8:	f8 01       	movw	r30, r16
 3ea:	ec 0f       	add	r30, r28
 3ec:	fd 1f       	adc	r31, r29
 3ee:	60 81       	ld	r22, Z
 3f0:	ce 01       	movw	r24, r28
 3f2:	cc df       	rcall	.-104    	; 0x38c <seg>
 3f4:	8f e1       	ldi	r24, 0x1F	; 31
 3f6:	9e e4       	ldi	r25, 0x4E	; 78
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <FND_4+0x20>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <FND_4+0x26>
 3fe:	00 00       	nop
}

int sm = 4;
void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i < sm; i++)
 400:	21 96       	adiw	r28, 0x01	; 1
 402:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 406:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 40a:	c8 17       	cp	r28, r24
 40c:	d9 07       	cpc	r29, r25
 40e:	64 f3       	brlt	.-40     	; 0x3e8 <FND_4+0x10>
	{
		seg(i, *(inf+i));
		//seg(i, inf[i]);
		_delay_ms(5);
	}
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	08 95       	ret

0000041a <SegDisp>:

char* SegDisp(unsigned long num) // 10진 정수 ==> 16진수 문자열 : 56506 ==> 0xDCBA // 문자열 다룰시 안전영역 고려, 정적변수에 넣어주는게 좋음
//          ==> 4digit 16진수 segement Image 배열
// int가 2byte여서 0x8000이 되면 범위를 넘어가서 unsigned long을 사용해야함
{
 41a:	4f 92       	push	r4
 41c:	5f 92       	push	r5
 41e:	6f 92       	push	r6
 420:	7f 92       	push	r7
 422:	8f 92       	push	r8
 424:	9f 92       	push	r9
 426:	af 92       	push	r10
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	00 d0       	rcall	.+0      	; 0x438 <SegDisp+0x1e>
 438:	00 d0       	rcall	.+0      	; 0x43a <SegDisp+0x20>
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
	num %= 3600;
 43e:	20 e1       	ldi	r18, 0x10	; 16
 440:	3e e0       	ldi	r19, 0x0E	; 14
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	33 d1       	rcall	.+614    	; 0x6ae <__udivmodsi4>
 448:	6b 01       	movw	r12, r22
 44a:	7c 01       	movw	r14, r24
	int n1 = num % 10;               // A (10) : 문자가 아닌 숫자
 44c:	0f 2e       	mov	r0, r31
 44e:	fa e0       	ldi	r31, 0x0A	; 10
 450:	8f 2e       	mov	r8, r31
 452:	91 2c       	mov	r9, r1
 454:	a1 2c       	mov	r10, r1
 456:	b1 2c       	mov	r11, r1
 458:	f0 2d       	mov	r31, r0
 45a:	a5 01       	movw	r20, r10
 45c:	94 01       	movw	r18, r8
 45e:	27 d1       	rcall	.+590    	; 0x6ae <__udivmodsi4>
 460:	69 83       	std	Y+1, r22	; 0x01
 462:	7a 83       	std	Y+2, r23	; 0x02
 464:	8b 83       	std	Y+3, r24	; 0x03
 466:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) %6;         // B (11)
 468:	ca 01       	movw	r24, r20
 46a:	b9 01       	movw	r22, r18
 46c:	26 e0       	ldi	r18, 0x06	; 6
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	1c d1       	rcall	.+568    	; 0x6ae <__udivmodsi4>
 476:	2b 01       	movw	r4, r22
 478:	3c 01       	movw	r6, r24
	int n3 = (num / 60) %10;         // C (12)
 47a:	c7 01       	movw	r24, r14
 47c:	b6 01       	movw	r22, r12
 47e:	2c e3       	ldi	r18, 0x3C	; 60
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	13 d1       	rcall	.+550    	; 0x6ae <__udivmodsi4>
 488:	ca 01       	movw	r24, r20
 48a:	b9 01       	movw	r22, r18
 48c:	a5 01       	movw	r20, r10
 48e:	94 01       	movw	r18, r8
 490:	0e d1       	rcall	.+540    	; 0x6ae <__udivmodsi4>
 492:	4b 01       	movw	r8, r22
 494:	5c 01       	movw	r10, r24
	int n4 = (num / 600);           // D (13)
 496:	c7 01       	movw	r24, r14
 498:	b6 01       	movw	r22, r12
 49a:	28 e5       	ldi	r18, 0x58	; 88
 49c:	32 e0       	ldi	r19, 0x02	; 2
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	05 d1       	rcall	.+522    	; 0x6ae <__udivmodsi4>
	arr[0] = digit[n1]; // char : 8bit
 4a4:	e9 81       	ldd	r30, Y+1	; 0x01
 4a6:	fa 81       	ldd	r31, Y+2	; 0x02
 4a8:	ea 5f       	subi	r30, 0xFA	; 250
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	80 81       	ld	r24, Z
 4ae:	e2 e2       	ldi	r30, 0x22	; 34
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	80 83       	st	Z, r24
	arr[1] = digit[n2];
 4b4:	d2 01       	movw	r26, r4
 4b6:	aa 5f       	subi	r26, 0xFA	; 250
 4b8:	be 4f       	sbci	r27, 0xFE	; 254
 4ba:	8c 91       	ld	r24, X
 4bc:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3];
 4be:	d4 01       	movw	r26, r8
 4c0:	aa 5f       	subi	r26, 0xFA	; 250
 4c2:	be 4f       	sbci	r27, 0xFE	; 254
 4c4:	8c 91       	ld	r24, X
 4c6:	82 83       	std	Z+2, r24	; 0x02
	arr[3] = digit[n4];
 4c8:	d9 01       	movw	r26, r18
 4ca:	aa 5f       	subi	r26, 0xFA	; 250
 4cc:	be 4f       	sbci	r27, 0xFE	; 254
 4ce:	8c 91       	ld	r24, X
 4d0:	83 83       	std	Z+3, r24	; 0x03
	sm = (num > 599) ? 4 : (num > 59) ? 3 : (num > 9) ? 2 : 1;
 4d2:	88 e5       	ldi	r24, 0x58	; 88
 4d4:	c8 16       	cp	r12, r24
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	d8 06       	cpc	r13, r24
 4da:	e1 04       	cpc	r14, r1
 4dc:	f1 04       	cpc	r15, r1
 4de:	78 f4       	brcc	.+30     	; 0x4fe <SegDisp+0xe4>
 4e0:	8c e3       	ldi	r24, 0x3C	; 60
 4e2:	c8 16       	cp	r12, r24
 4e4:	d1 04       	cpc	r13, r1
 4e6:	e1 04       	cpc	r14, r1
 4e8:	f1 04       	cpc	r15, r1
 4ea:	60 f4       	brcc	.+24     	; 0x504 <SegDisp+0xea>
 4ec:	8a e0       	ldi	r24, 0x0A	; 10
 4ee:	c8 16       	cp	r12, r24
 4f0:	d1 04       	cpc	r13, r1
 4f2:	e1 04       	cpc	r14, r1
 4f4:	f1 04       	cpc	r15, r1
 4f6:	48 f0       	brcs	.+18     	; 0x50a <SegDisp+0xf0>
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	08 c0       	rjmp	.+16     	; 0x50e <SegDisp+0xf4>
 4fe:	84 e0       	ldi	r24, 0x04	; 4
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	05 c0       	rjmp	.+10     	; 0x50e <SegDisp+0xf4>
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <SegDisp+0xf4>
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 512:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	FND_4(arr);
 516:	82 e2       	ldi	r24, 0x22	; 34
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	5e df       	rcall	.-324    	; 0x3d8 <FND_4>
	return arr;
 51c:	82 e2       	ldi	r24, 0x22	; 34
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	bf 90       	pop	r11
 536:	af 90       	pop	r10
 538:	9f 90       	pop	r9
 53a:	8f 90       	pop	r8
 53c:	7f 90       	pop	r7
 53e:	6f 90       	pop	r6
 540:	5f 90       	pop	r5
 542:	4f 90       	pop	r4
 544:	08 95       	ret

00000546 <TogglePinA>:
extern unsigned long cnt;
extern int opmode, state, mode;

void TogglePinA(int n, double dl) //  n: n번째 비트, dl : delay in mili-second
{
	char b = 1 << n;
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	a9 01       	movw	r20, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <TogglePinA+0xc>
 54e:	44 0f       	add	r20, r20
 550:	55 1f       	adc	r21, r21
 552:	8a 95       	dec	r24
 554:	e2 f7       	brpl	.-8      	; 0x54e <TogglePinA+0x8>
 556:	ca 01       	movw	r24, r20
	PORTA |= b; // PORTA의 0번째 비트를 high로 출력
 558:	9b b3       	in	r25, 0x1b	; 27
 55a:	98 2b       	or	r25, r24
 55c:	9b bb       	out	0x1b, r25	; 27
 55e:	5f ef       	ldi	r21, 0xFF	; 255
 560:	29 e6       	ldi	r18, 0x69	; 105
 562:	38 e1       	ldi	r19, 0x18	; 24
 564:	51 50       	subi	r21, 0x01	; 1
 566:	20 40       	sbci	r18, 0x00	; 0
 568:	30 40       	sbci	r19, 0x00	; 0
 56a:	e1 f7       	brne	.-8      	; 0x564 <TogglePinA+0x1e>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <TogglePinA+0x28>
 56e:	00 00       	nop
	_delay_ms(__delay_t);
	PORTA &= ~b; // PORTA의 0번째 비트를 low로 출력
 570:	9b b3       	in	r25, 0x1b	; 27
 572:	80 95       	com	r24
 574:	89 23       	and	r24, r25
 576:	8b bb       	out	0x1b, r24	; 27
 578:	4f ef       	ldi	r20, 0xFF	; 255
 57a:	59 e6       	ldi	r21, 0x69	; 105
 57c:	88 e1       	ldi	r24, 0x18	; 24
 57e:	41 50       	subi	r20, 0x01	; 1
 580:	50 40       	sbci	r21, 0x00	; 0
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <TogglePinA+0x38>
 586:	00 c0       	rjmp	.+0      	; 0x588 <TogglePinA+0x42>
 588:	00 00       	nop
 58a:	08 95       	ret

0000058c <mode_type>:
	_delay_ms(__delay_t);
}

void mode_type()
{
	switch(mode)
 58c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 590:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	91 05       	cpc	r25, r1
 598:	21 f0       	breq	.+8      	; 0x5a2 <mode_type+0x16>
 59a:	83 30       	cpi	r24, 0x03	; 3
 59c:	91 05       	cpc	r25, r1
 59e:	c9 f0       	breq	.+50     	; 0x5d2 <mode_type+0x46>
 5a0:	08 95       	ret
	{
		case 0:
			break;
		case 1:
			opmode = 0;
 5a2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <opmode+0x1>
 5a6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <opmode>
			state = 1;
 5aa:	21 e0       	ldi	r18, 0x01	; 1
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <state+0x1>
 5b2:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <state>
			cnt = 0;
 5b6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <cnt>
 5ba:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <cnt+0x1>
 5be:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cnt+0x2>
 5c2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cnt+0x3>
			mode++;
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 5cc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
			break;
 5d0:	08 95       	ret
		case 2:
			break;
		case 3:
			state = 3;
 5d2:	23 e0       	ldi	r18, 0x03	; 3
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <state+0x1>
 5da:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <state>
			mode++;
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 5e4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 5e8:	08 95       	ret

000005ea <kitchen_timer>:
	}
}

void kitchen_timer(int a)
{
	switch(state)
 5ea:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <state>
 5ee:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <state+0x1>
 5f2:	22 30       	cpi	r18, 0x02	; 2
 5f4:	31 05       	cpc	r19, r1
 5f6:	c9 f0       	breq	.+50     	; 0x62a <kitchen_timer+0x40>
 5f8:	1c f4       	brge	.+6      	; 0x600 <kitchen_timer+0x16>
 5fa:	23 2b       	or	r18, r19
 5fc:	49 f0       	breq	.+18     	; 0x610 <kitchen_timer+0x26>
 5fe:	08 95       	ret
 600:	23 30       	cpi	r18, 0x03	; 3
 602:	31 05       	cpc	r19, r1
 604:	89 f1       	breq	.+98     	; 0x668 <kitchen_timer+0x7e>
 606:	25 30       	cpi	r18, 0x05	; 5
 608:	31 05       	cpc	r19, r1
 60a:	09 f4       	brne	.+2      	; 0x60e <kitchen_timer+0x24>
 60c:	40 c0       	rjmp	.+128    	; 0x68e <kitchen_timer+0xa4>
 60e:	08 95       	ret
	{
		
		case 0:
			cnt = a; break;
 610:	09 2e       	mov	r0, r25
 612:	00 0c       	add	r0, r0
 614:	aa 0b       	sbc	r26, r26
 616:	bb 0b       	sbc	r27, r27
 618:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <cnt>
 61c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <cnt+0x1>
 620:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <cnt+0x2>
 624:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <cnt+0x3>
 628:	08 95       	ret
		case 1:
			break;
		case 2:
			if(cnt >= 30) cnt -=30;
 62a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cnt>
 62e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cnt+0x1>
 632:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <cnt+0x2>
 636:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <cnt+0x3>
 63a:	8e 31       	cpi	r24, 0x1E	; 30
 63c:	91 05       	cpc	r25, r1
 63e:	a1 05       	cpc	r26, r1
 640:	b1 05       	cpc	r27, r1
 642:	58 f0       	brcs	.+22     	; 0x65a <kitchen_timer+0x70>
 644:	4e 97       	sbiw	r24, 0x1e	; 30
 646:	a1 09       	sbc	r26, r1
 648:	b1 09       	sbc	r27, r1
 64a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <cnt>
 64e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <cnt+0x1>
 652:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <cnt+0x2>
 656:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <cnt+0x3>
			state--;
 65a:	21 50       	subi	r18, 0x01	; 1
 65c:	31 09       	sbc	r19, r1
 65e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <state+0x1>
 662:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <state>
			break;
 666:	08 95       	ret
		case 3:
			if(cnt == 0) state += 2;
 668:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cnt>
 66c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cnt+0x1>
 670:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <cnt+0x2>
 674:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <cnt+0x3>
 678:	89 2b       	or	r24, r25
 67a:	8a 2b       	or	r24, r26
 67c:	8b 2b       	or	r24, r27
 67e:	b1 f4       	brne	.+44     	; 0x6ac <kitchen_timer+0xc2>
 680:	2e 5f       	subi	r18, 0xFE	; 254
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <state+0x1>
 688:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <state>
 68c:	08 95       	ret
			break;
		case 4:
			break;
		case 5:
			TogglePinA(0,__delay_t);
 68e:	40 e0       	ldi	r20, 0x00	; 0
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	6a ef       	ldi	r22, 0xFA	; 250
 694:	73 e4       	ldi	r23, 0x43	; 67
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	55 df       	rcall	.-342    	; 0x546 <TogglePinA>
			state = 0; mode = 0;
 69c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <state+0x1>
 6a0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <state>
 6a4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 6a8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 6ac:	08 95       	ret

000006ae <__udivmodsi4>:
 6ae:	a1 e2       	ldi	r26, 0x21	; 33
 6b0:	1a 2e       	mov	r1, r26
 6b2:	aa 1b       	sub	r26, r26
 6b4:	bb 1b       	sub	r27, r27
 6b6:	fd 01       	movw	r30, r26
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <__udivmodsi4_ep>

000006ba <__udivmodsi4_loop>:
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	ee 1f       	adc	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	a2 17       	cp	r26, r18
 6c4:	b3 07       	cpc	r27, r19
 6c6:	e4 07       	cpc	r30, r20
 6c8:	f5 07       	cpc	r31, r21
 6ca:	20 f0       	brcs	.+8      	; 0x6d4 <__udivmodsi4_ep>
 6cc:	a2 1b       	sub	r26, r18
 6ce:	b3 0b       	sbc	r27, r19
 6d0:	e4 0b       	sbc	r30, r20
 6d2:	f5 0b       	sbc	r31, r21

000006d4 <__udivmodsi4_ep>:
 6d4:	66 1f       	adc	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	1a 94       	dec	r1
 6de:	69 f7       	brne	.-38     	; 0x6ba <__udivmodsi4_loop>
 6e0:	60 95       	com	r22
 6e2:	70 95       	com	r23
 6e4:	80 95       	com	r24
 6e6:	90 95       	com	r25
 6e8:	9b 01       	movw	r18, r22
 6ea:	ac 01       	movw	r20, r24
 6ec:	bd 01       	movw	r22, r26
 6ee:	cf 01       	movw	r24, r30
 6f0:	08 95       	ret

000006f2 <_exit>:
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>
