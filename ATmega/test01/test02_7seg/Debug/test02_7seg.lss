
test02_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000294  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  0000033a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8d  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ec  00000000  00000000  00000e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d2  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000306  00000000  00000000  00001fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000022d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	97 d0       	rcall	.+302    	; 0x1f2 <main>
  c4:	e5 c0       	rjmp	.+458    	; 0x290 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
	
}*/

void seg(int sel, uint8_t c)
{
	PORTD |= 0x0F;
  c8:	22 b3       	in	r18, 0x12	; 18
  ca:	2f 60       	ori	r18, 0x0F	; 15
  cc:	22 bb       	out	0x12, r18	; 18
	PORTD &= ~(1 <<(3-sel));
  ce:	22 b3       	in	r18, 0x12	; 18
  d0:	43 e0       	ldi	r20, 0x03	; 3
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	48 1b       	sub	r20, r24
  d6:	59 0b       	sbc	r21, r25
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <seg+0x1a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	4a 95       	dec	r20
  e4:	e2 f7       	brpl	.-8      	; 0xde <seg+0x16>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	82 bb       	out	0x12, r24	; 18
	PORTE = c; // 숫자 데이터 출력
  ec:	63 b9       	out	0x03, r22	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e9       	ldi	r24, 0x9F	; 159
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <seg+0x2a>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <seg+0x30>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <FND_4>:
	_delay_ms(1); // 0.01초 간격으로 전환
}

void FND_4(char *inf) // segment Image 배열
{
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
	for(int i = 0; i < 4; i++)
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	07 c0       	rjmp	.+14     	; 0x11a <FND_4+0x1e>
	{
		seg(i, *(inf+i));
 10c:	f8 01       	movw	r30, r16
 10e:	ec 0f       	add	r30, r28
 110:	fd 1f       	adc	r31, r29
 112:	60 81       	ld	r22, Z
 114:	ce 01       	movw	r24, r28
 116:	d8 df       	rcall	.-80     	; 0xc8 <seg>
	_delay_ms(1); // 0.01초 간격으로 전환
}

void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i < 4; i++)
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c4 30       	cpi	r28, 0x04	; 4
 11c:	d1 05       	cpc	r29, r1
 11e:	b4 f3       	brlt	.-20     	; 0x10c <FND_4+0x10>
	{
		seg(i, *(inf+i));
		//seg(i, inf[i]);
	}
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <Trans>:

char* Trans(unsigned long num) // 10진 정수 ==>16진수 문자열 : 56506 ==> 0xDCBA // 문자열 다룰시 안전영역 고려, 정적변수에 넣어주는게 좋음
                     //          ==>16진수 segement Image 배열
{
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
	int n1 = num % 0x10;               // A (10) : 문자가 아닌 숫자
 130:	db 01       	movw	r26, r22
 132:	af 70       	andi	r26, 0x0F	; 15
 134:	bb 27       	eor	r27, r27
	int n2 = (num / 0x10) %16;         // B (11)
 136:	8b 01       	movw	r16, r22
 138:	9c 01       	movw	r18, r24
 13a:	68 94       	set
 13c:	13 f8       	bld	r1, 3
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	17 95       	ror	r17
 144:	07 95       	ror	r16
 146:	16 94       	lsr	r1
 148:	d1 f7       	brne	.-12     	; 0x13e <Trans+0x14>
 14a:	f8 01       	movw	r30, r16
 14c:	ef 70       	andi	r30, 0x0F	; 15
 14e:	ff 27       	eor	r31, r31
	int n3 = (num / 0x100) %16;         // C (12)
 150:	07 2f       	mov	r16, r23
 152:	18 2f       	mov	r17, r24
 154:	29 2f       	mov	r18, r25
 156:	33 27       	eor	r19, r19
 158:	a8 01       	movw	r20, r16
 15a:	4f 70       	andi	r20, 0x0F	; 15
 15c:	55 27       	eor	r21, r21
	int n4 = (num / 0x1000);           // D (13)
 15e:	8b 01       	movw	r16, r22
 160:	9c 01       	movw	r18, r24
 162:	0f 2e       	mov	r0, r31
 164:	fc e0       	ldi	r31, 0x0C	; 12
 166:	36 95       	lsr	r19
 168:	27 95       	ror	r18
 16a:	17 95       	ror	r17
 16c:	07 95       	ror	r16
 16e:	fa 95       	dec	r31
 170:	d1 f7       	brne	.-12     	; 0x166 <Trans+0x3c>
 172:	f0 2d       	mov	r31, r0
 174:	98 01       	movw	r18, r16
	if(!(num / 0x1000))
 176:	61 15       	cp	r22, r1
 178:	c0 e1       	ldi	r28, 0x10	; 16
 17a:	7c 07       	cpc	r23, r28
 17c:	81 05       	cpc	r24, r1
 17e:	91 05       	cpc	r25, r1
 180:	c8 f4       	brcc	.+50     	; 0x1b4 <Trans+0x8a>
	{
		n4 = 16;
		if(!(num / 0x100))
 182:	6f 3f       	cpi	r22, 0xFF	; 255
 184:	71 05       	cpc	r23, r1
 186:	81 05       	cpc	r24, r1
 188:	91 05       	cpc	r25, r1
 18a:	09 f0       	breq	.+2      	; 0x18e <Trans+0x64>
 18c:	50 f4       	brcc	.+20     	; 0x1a2 <Trans+0x78>
		{
			n3 =16;
			if(!(num / 0x10)) n2 = 16;
 18e:	60 31       	cpi	r22, 0x10	; 16
 190:	71 05       	cpc	r23, r1
 192:	81 05       	cpc	r24, r1
 194:	91 05       	cpc	r25, r1
 196:	40 f0       	brcs	.+16     	; 0x1a8 <Trans+0x7e>
	int n2 = (num / 0x10) %16;         // B (11)
	int n3 = (num / 0x100) %16;         // C (12)
	int n4 = (num / 0x1000);           // D (13)
	if(!(num / 0x1000))
	{
		n4 = 16;
 198:	20 e1       	ldi	r18, 0x10	; 16
 19a:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num / 0x100))
		{
			n3 =16;
 19c:	40 e1       	ldi	r20, 0x10	; 16
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <Trans+0x8a>
	int n2 = (num / 0x10) %16;         // B (11)
	int n3 = (num / 0x100) %16;         // C (12)
	int n4 = (num / 0x1000);           // D (13)
	if(!(num / 0x1000))
	{
		n4 = 16;
 1a2:	20 e1       	ldi	r18, 0x10	; 16
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <Trans+0x8a>
 1a8:	20 e1       	ldi	r18, 0x10	; 16
 1aa:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num / 0x100))
		{
			n3 =16;
 1ac:	40 e1       	ldi	r20, 0x10	; 16
 1ae:	50 e0       	ldi	r21, 0x00	; 0
			if(!(num / 0x10)) n2 = 16;
 1b0:	e0 e1       	ldi	r30, 0x10	; 16
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	
	arr[0] = digit[n1]; // char : 8bit
 1b4:	a0 50       	subi	r26, 0x00	; 0
 1b6:	bf 4f       	sbci	r27, 0xFF	; 255
 1b8:	8c 91       	ld	r24, X
 1ba:	a2 e1       	ldi	r26, 0x12	; 18
 1bc:	b1 e0       	ldi	r27, 0x01	; 1
 1be:	8c 93       	st	X, r24
	arr[1] = digit[n2];
 1c0:	e0 50       	subi	r30, 0x00	; 0
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	11 96       	adiw	r26, 0x01	; 1
 1c8:	8c 93       	st	X, r24
 1ca:	11 97       	sbiw	r26, 0x01	; 1
	arr[2] = digit[n3];
 1cc:	fa 01       	movw	r30, r20
 1ce:	e0 50       	subi	r30, 0x00	; 0
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 81       	ld	r24, Z
 1d4:	12 96       	adiw	r26, 0x02	; 2
 1d6:	8c 93       	st	X, r24
 1d8:	12 97       	sbiw	r26, 0x02	; 2
	arr[3] = digit[n4];
 1da:	f9 01       	movw	r30, r18
 1dc:	e0 50       	subi	r30, 0x00	; 0
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	80 81       	ld	r24, Z
 1e2:	13 96       	adiw	r26, 0x03	; 3
 1e4:	8c 93       	st	X, r24
 1e6:	13 97       	sbiw	r26, 0x03	; 3
	
	//FND_4(arr);
	return arr;
}
 1e8:	cd 01       	movw	r24, r26
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <main>:
    /* Replace with your application code */
	unsigned long i,j = 0;
	int mode = 0;
	//int count = 0;
	//int d[4];
	DDRB &= ~0x01;
 1f2:	87 b3       	in	r24, 0x17	; 23
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF; // 세그먼트 
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	82 b9       	out	0x02, r24	; 2
	DDRD = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
 1fc:	8f e0       	ldi	r24, 0x0F	; 15
 1fe:	81 bb       	out	0x11, r24	; 17

int main(void)
{
    /* Replace with your application code */
	unsigned long i,j = 0;
	int mode = 0;
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d0 e0       	ldi	r29, 0x00	; 0
}

int main(void)
{
    /* Replace with your application code */
	unsigned long i,j = 0;
 204:	c1 2c       	mov	r12, r1
 206:	d1 2c       	mov	r13, r1
 208:	76 01       	movw	r14, r12
 20a:	05 c0       	rjmp	.+10     	; 0x216 <main+0x24>
		case 2:
		FND_4(Trans(j));
		break;
		
		default:
		mode = 0;
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	d0 e0       	ldi	r29, 0x00	; 0
		j = 0;
 210:	c1 2c       	mov	r12, r1
 212:	d1 2c       	mov	r13, r1
 214:	76 01       	movw	r14, r12
			
			default:
			mode = 0;
			count = 0;
		}*/
		if(!(PINB & 0x01) == 1)
 216:	b0 99       	sbic	0x16, 0	; 22
 218:	12 c0       	rjmp	.+36     	; 0x23e <main+0x4c>
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	85 ea       	ldi	r24, 0xA5	; 165
 21e:	9e e0       	ldi	r25, 0x0E	; 14
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x2e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x38>
 22a:	00 00       	nop
		{
			_delay_ms(300);
			mode++;
 22c:	21 96       	adiw	r28, 0x01	; 1
			if(mode >= 3) 
 22e:	c3 30       	cpi	r28, 0x03	; 3
 230:	d1 05       	cpc	r29, r1
 232:	2c f0       	brlt	.+10     	; 0x23e <main+0x4c>
			{
				mode = 0;
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
				j = 0;
 238:	c1 2c       	mov	r12, r1
 23a:	d1 2c       	mov	r13, r1
 23c:	76 01       	movw	r14, r12
			}
		}
		switch (mode)
 23e:	c1 30       	cpi	r28, 0x01	; 1
 240:	d1 05       	cpc	r29, r1
 242:	59 f0       	breq	.+22     	; 0x25a <main+0x68>
 244:	c2 30       	cpi	r28, 0x02	; 2
 246:	d1 05       	cpc	r29, r1
 248:	f1 f0       	breq	.+60     	; 0x286 <main+0x94>
 24a:	20 97       	sbiw	r28, 0x00	; 0
 24c:	f9 f6       	brne	.-66     	; 0x20c <main+0x1a>
		{
		case 0:
		PORTD &= ~ 0x0F;
 24e:	82 b3       	in	r24, 0x12	; 18
 250:	80 7f       	andi	r24, 0xF0	; 240
 252:	82 bb       	out	0x12, r24	; 18
		PORTE = 0x40;
 254:	80 e4       	ldi	r24, 0x40	; 64
 256:	83 b9       	out	0x03, r24	; 3
		break;
 258:	de cf       	rjmp	.-68     	; 0x216 <main+0x24>
		
		case 1:
		if(j >= 0x10000) j = 0;
 25a:	c1 14       	cp	r12, r1
 25c:	d1 04       	cpc	r13, r1
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	e2 06       	cpc	r14, r18
 262:	f1 04       	cpc	r15, r1
 264:	18 f4       	brcc	.+6      	; 0x26c <main+0x7a>
 266:	c7 01       	movw	r24, r14
 268:	b6 01       	movw	r22, r12
 26a:	03 c0       	rjmp	.+6      	; 0x272 <main+0x80>
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	cb 01       	movw	r24, r22
		FND_4(Trans(j++));
 272:	6b 01       	movw	r12, r22
 274:	7c 01       	movw	r14, r24
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	c2 1a       	sub	r12, r18
 27a:	d2 0a       	sbc	r13, r18
 27c:	e2 0a       	sbc	r14, r18
 27e:	f2 0a       	sbc	r15, r18
 280:	54 df       	rcall	.-344    	; 0x12a <Trans>
 282:	3c df       	rcall	.-392    	; 0xfc <FND_4>
		break;
 284:	c8 cf       	rjmp	.-112    	; 0x216 <main+0x24>
		
		case 2:
		FND_4(Trans(j));
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	4f df       	rcall	.-354    	; 0x12a <Trans>
 28c:	37 df       	rcall	.-402    	; 0xfc <FND_4>
		break;
 28e:	c3 cf       	rjmp	.-122    	; 0x216 <main+0x24>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
